"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var Config_1 = require("../Config");
require("rxjs/add/operator/filter");
var post_1 = require("./post");
var comment_1 = require("./comment");
var BlogService = (function () {
    function BlogService(http) {
        this.http = http;
        this.title = "";
        this.body = "";
        this.slug = "";
    }
    //Pulls the Posts from the Blog API and returns the array of Posts to the post component
    BlogService.prototype.posts = function () {
        var headers = new http_1.Headers();
        headers.append("Ocp-Apim-Subscription-Key", Config_1.Config.apiKey);
        var result = this.http.get(Config_1.Config.apiUrl + "Posts", { headers: headers })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var posts = new Array();
            data.forEach(function (post) {
                posts.push(new post_1.Post(post.title, post.body, post.slug, post.isStatic, post.isFeatured, post.dateCreated, post.datePublished, post.status, post.tags));
            });
            return posts;
        }).catch(this.handleErrors);
        return result;
    };
    //Reports the error for any of the data being pulled or pushed from/to the Blog API
    BlogService.prototype.handleErrors = function (error, caught) {
        console.log(JSON.stringify(error));
        return Rx_1.Observable.throw(error);
    };
    //Pulls a Post by slug to open up and read
    //Needs to be fixed like how comments are chosen by the delete function
    BlogService.prototype.getPostBySlug = function (slug) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        console.log(Config_1.Config.postUrl + slug);
        return this.http.get(Config_1.Config.postUrl + slug, { headers: headers })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var post = new post_1.Post(data.title, data.body, data.slug, data.isStatic, data.isFeatured, data.dateCreated, data.datePublished, data.status, data.tags);
            return post;
        }).catch(this.handleErrors);
    };
    //Posts a Comment to the Blog API to be posted.
    BlogService.prototype.postComment = function (comment, slug) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.post(Config_1.Config.createCommentUrl + slug, JSON.stringify({
            "Email": comment.email,
            "Message": comment.message,
            "Name": comment.name
        }), { headers: headers })
            .map(function (res) { return res.json(); })
            .catch(this.handleErrors);
    };
    //Gets all comments for a blog post and stores them in a Comment array 
    BlogService.prototype.getComments = function (slug) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        var result = this.http.get(Config_1.Config.getAllCommentsUrl + slug, { headers: headers })
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var comments = new Array();
            data.forEach(function (comment) {
                comments.push(new comment_1.Comment(comment.id, comment.email, comment.message, comment.user, comment.dateCreated));
            });
            return comments;
        }).catch(this.handleErrors);
        return result;
    };
    //Gets an id of type GUID and deletes it from the Blog API
    BlogService.prototype.deleteComment = function (id) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.delete(Config_1.Config.deleteCommentUrl + id)
            .map(function (res) { return res.json(); })
            .catch(this.handleErrors);
    };
    return BlogService;
}());
BlogService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], BlogService);
exports.BlogService = BlogService;
//# sourceMappingURL=data:application/json;base64,